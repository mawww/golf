#!/usr/bin/env bash

#############################################################################
# Significant exit codes
#############################################################################
declare -r EX_SUCCESS=0  EX_FAIL=1  EX_USAGE=64


#############################################################################
# Checks current PATH for executables of the specified names. If any of them
# are not found, then this function will write to stderr and exit with the
# EX_FAIL failure status code.
#############################################################################
confirm_in_path() {
  local prereqs=$1
  for prog in "${prereqs[@]}" ; do
    command -v ${prog} > /dev/null 2>&1 || { echo >&2 "Program '${prog}' required but not found."; exit ${EX_FAIL}; }
  done
}


#############################################################################
# Counts the number of keystrokes in a Kakoune-generated string.
# (This function body is a subshell to limit the scope of the shopt builtin.)
#############################################################################
count_keys() (
  local keys=$1
  shopt -s extglob
  keys=${keys//<@([ca]-|)@(?|ret|space|tab|lt|gt|backspace|esc|up|down|left|right|pageup|pagedown|home|end|backtab|del|minus|plus)>/0}
  printf "${#keys}"
)


#############################################################################
# Prints the escape sequence for setting foreground color.
#############################################################################
color_seq() {
    printf '\033[00;%sm' "$1"
}


#############################################################################
# Center a heading containing a specified text string, of a specified width
# and surrounded by specified characters, like this...
################################# My Heading ################################
# ...which is generated by: center_heading ' My Heading ' 77 '#'
# 
# Note: This function requires seq(1), and is therefore not POSIX-compliant.
#############################################################################
center_heading() {
  local hdr_text=$1
  local -i width=$2
  local char=$3

  local format='%.s'
  format+=${char:0:1}

  local lenlft=0  lenrht=0
  lenrht=$(( (${width} - ${#hdr_text}) / 2 ))
  lenlft=$(( ${lenrht} + ((${width} - ${#hdr_text}) % 2) ))
  printf ${format} $(seq 1 ${lenlft})
  printf '%s' "${hdr_text}"
  printf ${format} $(seq 1 ${lenrht})
}


